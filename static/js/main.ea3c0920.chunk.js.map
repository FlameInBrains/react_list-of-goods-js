{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_BY_LENGTH","SORT_BY_ALPHABET","App","useState","sortField","setSortField","isReverse","setReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","length","localeCompare","reverse","getPreparedGoods","className","onClick","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAiB,SACjBC,EAAmB,WA2BlB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EA5BR,SAA0BC,EAA1B,GAA4D,IAAzBL,EAAwB,EAAxBA,UAAWE,EAAa,EAAbA,UACtCI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,OAASD,EAAMC,OAE9B,KAAKb,EACH,OAAOW,EAAMG,cAAcF,GAE7B,QACE,OAAO,MAKXP,GACFI,EAAcM,UAGTN,EAMcO,CACnBlB,EACA,CAAEK,YAAWE,cAGf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMd,EAAaJ,IAC5BmB,KAAK,SACLF,UACEG,IAAW,iBAAkB,CAC3B,WAAYjB,IAAcH,IALhC,iCAYA,wBACEkB,QAAS,kBAAMd,EAAaL,IAC5BoB,KAAK,SACLF,UACEG,IAAW,oBAAqB,CAC9B,WAAYjB,IAAcJ,IALhC,4BAYA,wBACEmB,QAAS,WACPZ,GAAYD,IAEdc,KAAK,SACLF,UACEG,IAAW,oBAAqB,CAC9B,YAA0B,IAAdf,IAPlB,qBAeEF,GAAaE,EAET,wBACEa,QAAS,WACPd,EAAa,IACbE,GAAW,IAEba,KAAK,SACLF,UAAU,4BANZ,mBAWA,MAIR,6BACGV,EAAac,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YClHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ea3c0920.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BY_LENGTH = 'length';\nconst SORT_BY_ALPHABET = 'alphabet';\n\nfunction getPreparedGoods(goods, { sortField, isReverse }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_BY_LENGTH:\n          return good1.length - good2.length;\n\n        case SORT_BY_ALPHABET:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReverse, setReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReverse },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_BY_ALPHABET)}\n          type=\"button\"\n          className={\n            classNames('button is-info', {\n              'is-light': sortField !== SORT_BY_ALPHABET,\n            })\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_BY_LENGTH)}\n          type=\"button\"\n          className={\n            classNames('button is-success', {\n              'is-light': sortField !== SORT_BY_LENGTH,\n            })\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            setReverse(!isReverse);\n          }}\n          type=\"button\"\n          className={\n            classNames('button is-warning', {\n              'is-light': isReverse !== true,\n            })\n          }\n        >\n          Reverse\n        </button>\n\n        {\n          sortField || isReverse\n            ? (\n              <button\n                onClick={() => {\n                  setSortField('');\n                  setReverse(false);\n                }}\n                type=\"button\"\n                className=\"button is-danger is-light\"\n              >\n                Reset\n              </button>\n            )\n            : ''\n          }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}